// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace Example
{
    [System.Serializable()]
    public partial class ProtoA
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ProtoA Deserialize(Stream stream)
        {
            ProtoA instance = new ProtoA();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ProtoA DeserializeLengthDelimited(Stream stream)
        {
            ProtoA instance = new ProtoA();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ProtoA DeserializeLength(Stream stream, int length)
        {
            ProtoA instance = new ProtoA();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ProtoA Deserialize(byte[] buffer)
        {
            ProtoA instance = new ProtoA();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Example.ProtoA Deserialize(byte[] buffer, Example.ProtoA instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Example.ProtoA Deserialize(Stream stream, Example.ProtoA instance)
        {
            BinaryReader br = new BinaryReader(stream);
            if (instance.A == null)
                instance.A = new List<bool>();
            if (instance.B == null)
                instance.B = new List<int>();
            if (instance.C == null)
                instance.C = new List<float>();
            if (instance.D == null)
                instance.D = new List<string>();
            if (instance.E == null)
                instance.E = new List<Example.ProtoE>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        // repeated
                        instance.A.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream));
                        continue;
                    // Field 2 Varint
                    case 16:
                        // repeated
                        instance.B.Add((int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        // repeated
                        instance.C.Add(br.ReadSingle());
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.D.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.E.Add(Example.ProtoE.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.ProtoA DeserializeLengthDelimited(Stream stream, Example.ProtoA instance)
        {
            BinaryReader br = new BinaryReader(stream);
            if (instance.A == null)
                instance.A = new List<bool>();
            if (instance.B == null)
                instance.B = new List<int>();
            if (instance.C == null)
                instance.C = new List<float>();
            if (instance.D == null)
                instance.D = new List<string>();
            if (instance.E == null)
                instance.E = new List<Example.ProtoE>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        // repeated
                        instance.A.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream));
                        continue;
                    // Field 2 Varint
                    case 16:
                        // repeated
                        instance.B.Add((int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        // repeated
                        instance.C.Add(br.ReadSingle());
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.D.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.E.Add(Example.ProtoE.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.ProtoA DeserializeLength(Stream stream, int length, Example.ProtoA instance)
        {
            BinaryReader br = new BinaryReader(stream);
            if (instance.A == null)
                instance.A = new List<bool>();
            if (instance.B == null)
                instance.B = new List<int>();
            if (instance.C == null)
                instance.C = new List<float>();
            if (instance.D == null)
                instance.D = new List<string>();
            if (instance.E == null)
                instance.E = new List<Example.ProtoE>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        // repeated
                        instance.A.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream));
                        continue;
                    // Field 2 Varint
                    case 16:
                        // repeated
                        instance.B.Add((int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        // repeated
                        instance.C.Add(br.ReadSingle());
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.D.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.E.Add(Example.ProtoE.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ProtoA instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.A != null)
            {
                foreach (var i1 in instance.A)
                {
                    // Key for field: 1, Varint
                    stream.WriteByte(8);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, i1);
                }
            }
            if (instance.B != null)
            {
                foreach (var i2 in instance.B)
                {
                    // Key for field: 2, Varint
                    stream.WriteByte(16);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)i2);
                }
            }
            if (instance.C != null)
            {
                foreach (var i3 in instance.C)
                {
                    // Key for field: 3, Fixed32
                    stream.WriteByte(29);
                    bw.Write(i3);
                }
            }
            if (instance.D != null)
            {
                foreach (var i4 in instance.D)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(i4));
                }
            }
            if (instance.E != null)
            {
                foreach (var i5 in instance.E)
                {
                    // Key for field: 5, LengthDelimited
                    stream.WriteByte(42);
                    ﻿msField.SetLength(0);
                    Example.ProtoE.Serialize(msField, i5);
                    // Length delimited byte array
                    uint length5 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                    stream.Write(msField.GetBuffer(), 0, (int)length5);

                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ProtoA instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ProtoA instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    [System.Serializable()]
    public partial class ProtoE
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ProtoE Deserialize(Stream stream)
        {
            ProtoE instance = new ProtoE();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ProtoE DeserializeLengthDelimited(Stream stream)
        {
            ProtoE instance = new ProtoE();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ProtoE DeserializeLength(Stream stream, int length)
        {
            ProtoE instance = new ProtoE();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ProtoE Deserialize(byte[] buffer)
        {
            ProtoE instance = new ProtoE();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Example.ProtoE Deserialize(byte[] buffer, Example.ProtoE instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Example.ProtoE Deserialize(Stream stream, Example.ProtoE instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.A = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.B = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.C = br.ReadSingle();
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.D = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.ProtoE DeserializeLengthDelimited(Stream stream, Example.ProtoE instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.A = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.B = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.C = br.ReadSingle();
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.D = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.ProtoE DeserializeLength(Stream stream, int length, Example.ProtoE instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.A = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.B = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.C = br.ReadSingle();
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.D = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ProtoE instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.A);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.B);
            // Key for field: 3, Fixed32
            stream.WriteByte(29);
            bw.Write(instance.C);
            if (instance.D != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.D));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ProtoE instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ProtoE instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

}
